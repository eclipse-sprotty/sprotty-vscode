/******************************************************************************
 * This file was generated by langium-cli 2.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const StatesTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export interface Event extends AstNode {
    readonly $container: StateMachine;
    readonly $type: 'Event';
    name: string
}

export const Event = 'Event';

export function isEvent(item: unknown): item is Event {
    return reflection.isInstance(item, Event);
}

export interface State extends AstNode {
    readonly $container: StateMachine;
    readonly $type: 'State';
    name: string
    transitions: Array<Transition>
}

export const State = 'State';

export function isState(item: unknown): item is State {
    return reflection.isInstance(item, State);
}

export interface StateMachine extends AstNode {
    readonly $type: 'StateMachine';
    events: Array<Event>
    name: string
    states: Array<State>
}

export const StateMachine = 'StateMachine';

export function isStateMachine(item: unknown): item is StateMachine {
    return reflection.isInstance(item, StateMachine);
}

export interface Transition extends AstNode {
    readonly $container: State;
    readonly $type: 'Transition';
    event: Reference<Event>
    state: Reference<State>
}

export const Transition = 'Transition';

export function isTransition(item: unknown): item is Transition {
    return reflection.isInstance(item, Transition);
}

export type StatesAstType = {
    Event: Event
    State: State
    StateMachine: StateMachine
    Transition: Transition
}

export class StatesAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Event', 'State', 'StateMachine', 'Transition'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Transition:event': {
                return Event;
            }
            case 'Transition:state': {
                return State;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'State': {
                return {
                    name: 'State',
                    mandatory: [
                        { name: 'transitions', type: 'array' }
                    ]
                };
            }
            case 'StateMachine': {
                return {
                    name: 'StateMachine',
                    mandatory: [
                        { name: 'events', type: 'array' },
                        { name: 'states', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new StatesAstReflection();
